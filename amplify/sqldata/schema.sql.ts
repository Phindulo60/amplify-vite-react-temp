/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from "@aws-amplify/data-schema";
import { configure } from "@aws-amplify/data-schema/internals";
import { secret } from "@aws-amplify/backend";

export const schema = configure({
    database: {
        identifier: "IDpIpgnUlJH5M5fHkvywCWA",
        engine: "mysql",
        connectionUri: secret("SQL_CONNECTION_STRING"),
        vpcConfig: {
            vpcId: "vpc-06eb15fcdb8d99c13",
            securityGroupIds: [
                "sg-0383349e70c9893ce",
                "sg-0f595be854aba2172"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: "subnet-025938c6df28c5044",
                    availabilityZone: "eu-west-1a"
                },
                {
                    subnetId: "subnet-028ac957343eda1be",
                    availabilityZone: "eu-west-1b"
                }
            ]
        }
    }
}).schema({
    "Project": a.model({
        id: a.string().required(),
        name: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "Category": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        name: a.string().required(),
        color: a.string(),
        shortcutKey: a.string(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "Image": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        latitude: a.float(),
        longitude: a.float(),
        altitude_wgs84: a.float(),
        altitude_agl: a.float(),
        altitude_egm96: a.float(),
        width: a.integer().required(),
        height: a.integer().required(),
        roll: a.float(),
        yaw: a.float(),
        pitch: a.float(),
        timestamp: a.datetime(),
        exifData: a.string(),
        cameraSerial: a.string(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "ImageFile": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        path: a.string().required(),
        imageId: a.string(),
        s3key: a.string().required(),
        type: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "AnnotationSet": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        name: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "Object": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        categoryId: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "Annotation": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        setId: a.string().required(),
        source: a.string().required(),
        categoryId: a.string().required(),
        imageId: a.string().required(),
        x: a.integer().required(),
        y: a.integer().required(),
        obscured: a.integer(),
        objectId: a.string(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "LocationSet": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        name: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "Location": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        imageId: a.string(),
        setId: a.string().required(),
        height: a.integer(),
        width: a.integer(),
        x: a.integer().required(),
        y: a.integer().required(),
        source: a.string().required(),
        confidence: a.float(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "Observation": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        locationId: a.string().required(),
        annotationSetId: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "ImageSet": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        name: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "ImageSetMembership": a.model({
        id: a.string().required(),
        imageId: a.string().required(),
        imageSetId: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "UserProjectMembership": a.model({
        id: a.string().required(),
        userId: a.string().required(),
        projectId: a.string().required(),
        isAdmin: a.integer(),
        queueUrl: a.string(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ]),
    "Queue": a.model({
        id: a.string().required(),
        projectId: a.string().required(),
        name: a.string().required(),
        url: a.string().required(),
        createdAt: a.datetime(),
        updatedAt: a.datetime()
    }).identifier([
        "id"
    ])
});
